{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/*!\n    *\n    * Wijmo Library 5.20211.794\n    * http://wijmo.com/\n    *\n    * Copyright(c) GrapeCity, Inc.  All rights reserved.\n    *\n    * Licensed under the GrapeCity Commercial License.\n    * sales@wijmo.com\n    * wijmo.com/products/wijmo-5/license/\n    *\n    */\n/**\n* {@module wijmo.angular2.gauge}\n* Contains Angular 2 components for the <b>wijmo.gauge</b> module.\n*\n* <b>wijmo.angular2.gauge</b> is an external TypeScript module that can be imported to your code\n* using its ambient module name. For example:\n*\n* <pre>import * as wjGauge from 'wijmo/wijmo.angular2.gauge';\n* &nbsp;\n* &#64;Component({\n*     directives: [wjGauge.WjLinearGauge],\n*     template: '&lt;wj-linear-gauge [(value)]=\"amount\" [isReadOnly]=\"false\"&gt;&lt;/wj-linear-gauge&gt;',\n*     selector: 'my-cmp',\n* })\n* export class MyCmp {\n*     amount = 0;\n* }</pre>\n*\n*/\n/**\n *\n */\nexport declare var ___keepComment: any;\nimport { EventEmitter, AfterViewInit, ElementRef, Injector, OnInit, OnDestroy } from '@angular/core';\nimport { IWjComponentMetadata, IWjComponentMeta } from '@grapecity/wijmo.angular2.directivebase';\nimport * as wjcGauge from '@grapecity/wijmo.gauge';\ndeclare var wjLinearGaugeMeta: IWjComponentMeta;\nexport { wjLinearGaugeMeta };\n/**\n * Angular 2 component for the {@link wijmo.gauge.LinearGauge} control.\n *\n * Use the <b>wj-linear-gauge</b> component to add <b>LinearGauge</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjLinearGauge</b> component is derived from the <b>LinearGauge</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-linear-gauge</b> component may contain a {@link wijmo.angular2.gauge.WjRange} child component.\n*/\nexport declare class WjLinearGauge extends wjcGauge.LinearGauge implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjBulletGraphMeta: IWjComponentMeta;\nexport { wjBulletGraphMeta };\n/**\n * Angular 2 component for the {@link wijmo.gauge.BulletGraph} control.\n *\n * Use the <b>wj-bullet-graph</b> component to add <b>BulletGraph</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjBulletGraph</b> component is derived from the <b>BulletGraph</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-bullet-graph</b> component may contain a {@link wijmo.angular2.gauge.WjRange} child component.\n*/\nexport declare class WjBulletGraph extends wjcGauge.BulletGraph implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjRadialGaugeMeta: IWjComponentMeta;\nexport { wjRadialGaugeMeta };\n/**\n * Angular 2 component for the {@link wijmo.gauge.RadialGauge} control.\n *\n * Use the <b>wj-radial-gauge</b> component to add <b>RadialGauge</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjRadialGauge</b> component is derived from the <b>RadialGauge</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-radial-gauge</b> component may contain a {@link wijmo.angular2.gauge.WjRange} child component.\n*/\nexport declare class WjRadialGauge extends wjcGauge.RadialGauge implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjRangeMeta: IWjComponentMeta;\nexport { wjRangeMeta };\n/**\n * Angular 2 component for the {@link wijmo.gauge.Range} class.\n *\n * The <b>wj-range</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.gauge.WjLinearGauge}\n * , {@link wijmo.angular2.gauge.WjBulletGraph}\n *  or {@link wijmo.angular2.gauge.WjRadialGauge}.\n *\n * Use the <b>wj-range</b> component to add <b>Range</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjRange</b> component is derived from the <b>Range</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjRange extends wjcGauge.Range implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'ranges'.\n     */\n    wjProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class WjGaugeModule {\n}\n"]}