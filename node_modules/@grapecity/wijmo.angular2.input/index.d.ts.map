{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/*!\n    *\n    * Wijmo Library 5.20211.794\n    * http://wijmo.com/\n    *\n    * Copyright(c) GrapeCity, Inc.  All rights reserved.\n    *\n    * Licensed under the GrapeCity Commercial License.\n    * sales@wijmo.com\n    * wijmo.com/products/wijmo-5/license/\n    *\n    */\n/**\n* {@module wijmo.angular2.input}\n* Contains Angular 2 components for the <b>wijmo.input</b> module.\n*\n* <b>wijmo.angular2.input</b> is an external TypeScript module that can be imported to your code\n* using its ambient module name. For example:\n*\n* <pre>import * as wjInput from 'wijmo/wijmo.angular2.input';\n* &nbsp;\n* &#64;Component({\n*     directives: [wjInput.WjInputNumber],\n*     template: '&lt;wj-input-number [(value)]=\"amount\"&gt;&lt;/wj-input-number&gt;',\n*     selector: 'my-cmp',\n* })\n* export class MyCmp {\n*     amount = 0;\n* }</pre>\n*\n*/\n/**\n *\n */\nexport declare var ___keepComment: any;\nimport { EventEmitter, AfterViewInit, ElementRef, Injector, ViewContainerRef, TemplateRef, OnInit, OnChanges, OnDestroy, AfterContentInit, ChangeDetectorRef } from '@angular/core';\nimport { IWjComponentMetadata, IWjComponentMeta, IWjDirectiveMeta } from '@grapecity/wijmo.angular2.directivebase';\nimport * as ngCore from '@angular/core';\nimport * as wjcCore from '@grapecity/wijmo';\nimport * as wjcInput from '@grapecity/wijmo.input';\ndeclare var wjListBoxMeta: IWjComponentMeta;\nexport { wjListBoxMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.ListBox} control.\n *\n * Use the <b>wj-list-box</b> component to add <b>ListBox</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjListBox</b> component is derived from the <b>ListBox</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-list-box</b> component may contain a {@link wijmo.angular2.input.WjItemTemplate} child directive.\n*/\nexport declare class WjListBox extends wjcInput.ListBox implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'selectedValue'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsChanged</b> Wijmo event name.\n     */\n    itemsChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemChecked</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemChecked</b> Wijmo event name.\n     */\n    itemCheckedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>checkedItemsChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>checkedItemsChanged</b> Wijmo event name.\n     */\n    checkedItemsChangedNg: EventEmitter<any>;\n    checkedItemsChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjMultiSelectListBoxMeta: IWjComponentMeta;\nexport { wjMultiSelectListBoxMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.MultiSelectListBox} control.\n *\n * Use the <b>wj-multi-select-list-box</b> component to add <b>MultiSelectListBox</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjMultiSelectListBox</b> component is derived from the <b>MultiSelectListBox</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjMultiSelectListBox extends wjcInput.MultiSelectListBox implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'checkedItems'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>checkedItemsChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>checkedItemsChanged</b> Wijmo event name.\n     */\n    checkedItemsChangedNg: EventEmitter<any>;\n    checkedItemsChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjComboBoxMeta: IWjComponentMeta;\nexport { wjComboBoxMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.ComboBox} control.\n *\n * Use the <b>wj-combo-box</b> component to add <b>ComboBox</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjComboBox</b> component is derived from the <b>ComboBox</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-combo-box</b> component may contain a {@link wijmo.angular2.input.WjItemTemplate} child directive.\n*/\nexport declare class WjComboBox extends wjcInput.ComboBox implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'selectedValue'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjAutoCompleteMeta: IWjComponentMeta;\nexport { wjAutoCompleteMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.AutoComplete} control.\n *\n * Use the <b>wj-auto-complete</b> component to add <b>AutoComplete</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjAutoComplete</b> component is derived from the <b>AutoComplete</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjAutoComplete extends wjcInput.AutoComplete implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'selectedValue'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjCalendarMeta: IWjComponentMeta;\nexport { wjCalendarMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.Calendar} control.\n *\n * Use the <b>wj-calendar</b> component to add <b>Calendar</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjCalendar</b> component is derived from the <b>Calendar</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjCalendar extends wjcInput.Calendar implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeEndChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeEndChanged</b> Wijmo event name.\n     */\n    rangeEndChangedNg: EventEmitter<any>;\n    rangeEndChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeChanged</b> Wijmo event name.\n     */\n    rangeChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>displayMonthChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>displayMonthChanged</b> Wijmo event name.\n     */\n    displayMonthChangedNg: EventEmitter<any>;\n    displayMonthChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjColorPickerMeta: IWjComponentMeta;\nexport { wjColorPickerMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.ColorPicker} control.\n *\n * Use the <b>wj-color-picker</b> component to add <b>ColorPicker</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjColorPicker</b> component is derived from the <b>ColorPicker</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjColorPicker extends wjcInput.ColorPicker implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputMaskMeta: IWjComponentMeta;\nexport { wjInputMaskMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputMask} control.\n *\n * Use the <b>wj-input-mask</b> component to add <b>InputMask</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputMask</b> component is derived from the <b>InputMask</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputMask extends wjcInput.InputMask implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    rawValueChangePC: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputColorMeta: IWjComponentMeta;\nexport { wjInputColorMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputColor} control.\n *\n * Use the <b>wj-input-color</b> component to add <b>InputColor</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputColor</b> component is derived from the <b>InputColor</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputColor extends wjcInput.InputColor implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjMultiSelectMeta: IWjComponentMeta;\nexport { wjMultiSelectMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.MultiSelect} control.\n *\n * Use the <b>wj-multi-select</b> component to add <b>MultiSelect</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjMultiSelect</b> component is derived from the <b>MultiSelect</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-multi-select</b> component may contain a {@link wijmo.angular2.input.WjItemTemplate} child directive.\n*/\nexport declare class WjMultiSelect extends wjcInput.MultiSelect implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'checkedItems'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>checkedItemsChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>checkedItemsChanged</b> Wijmo event name.\n     */\n    checkedItemsChangedNg: EventEmitter<any>;\n    checkedItemsChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjMultiAutoCompleteMeta: IWjComponentMeta;\nexport { wjMultiAutoCompleteMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.MultiAutoComplete} control.\n *\n * Use the <b>wj-multi-auto-complete</b> component to add <b>MultiAutoComplete</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjMultiAutoComplete</b> component is derived from the <b>MultiAutoComplete</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjMultiAutoComplete extends wjcInput.MultiAutoComplete implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'selectedItems'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedItemsChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedItemsChanged</b> Wijmo event name.\n     */\n    selectedItemsChangedNg: EventEmitter<any>;\n    selectedItemsChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputNumberMeta: IWjComponentMeta;\nexport { wjInputNumberMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputNumber} control.\n *\n * Use the <b>wj-input-number</b> component to add <b>InputNumber</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputNumber</b> component is derived from the <b>InputNumber</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputNumber extends wjcInput.InputNumber implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputDateMeta: IWjComponentMeta;\nexport { wjInputDateMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputDate} control.\n *\n * Use the <b>wj-input-date</b> component to add <b>InputDate</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputDate</b> component is derived from the <b>InputDate</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputDate extends wjcInput.InputDate implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeEndChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeEndChanged</b> Wijmo event name.\n     */\n    rangeEndChangedNg: EventEmitter<any>;\n    rangeEndChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeChanged</b> Wijmo event name.\n     */\n    rangeChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputTimeMeta: IWjComponentMeta;\nexport { wjInputTimeMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputTime} control.\n *\n * Use the <b>wj-input-time</b> component to add <b>InputTime</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputTime</b> component is derived from the <b>InputTime</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputTime extends wjcInput.InputTime implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputDateTimeMeta: IWjComponentMeta;\nexport { wjInputDateTimeMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputDateTime} control.\n *\n * Use the <b>wj-input-date-time</b> component to add <b>InputDateTime</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputDateTime</b> component is derived from the <b>InputDateTime</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputDateTime extends wjcInput.InputDateTime implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeEndChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeEndChanged</b> Wijmo event name.\n     */\n    rangeEndChangedNg: EventEmitter<any>;\n    rangeEndChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeChanged</b> Wijmo event name.\n     */\n    rangeChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjInputDateRangeMeta: IWjComponentMeta;\nexport { wjInputDateRangeMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.InputDateRange} control.\n *\n * Use the <b>wj-input-date-range</b> component to add <b>InputDateRange</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjInputDateRange</b> component is derived from the <b>InputDateRange</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjInputDateRange extends wjcInput.InputDateRange implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'value'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>valueChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>valueChanged</b> Wijmo event name.\n     */\n    valueChangedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeEndChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeEndChanged</b> Wijmo event name.\n     */\n    rangeEndChangedNg: EventEmitter<any>;\n    rangeEndChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeChanged</b> Wijmo event name.\n     */\n    rangeChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjMenuMeta: IWjComponentMeta;\nexport { wjMenuMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.Menu} control.\n *\n * Use the <b>wj-menu</b> component to add <b>Menu</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjMenu</b> component is derived from the <b>Menu</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-menu</b> component may contain the following child components:\n * {@link wijmo.angular2.input.WjMenuItem}\n * , {@link wijmo.angular2.input.WjMenuSeparator}\n *  and {@link wijmo.angular2.input.WjItemTemplate}.\n*/\nexport declare class WjMenu extends wjcInput.Menu implements OnInit, OnDestroy, AfterViewInit, OnChanges, AfterContentInit {\n    private _value;\n    private _definedHeader;\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is 'selectedValue'.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanging</b> Wijmo event name.\n     */\n    isDroppedDownChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>isDroppedDownChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>isDroppedDownChanged</b> Wijmo event name.\n     */\n    isDroppedDownChangedNg: EventEmitter<any>;\n    isDroppedDownChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>textChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>textChanged</b> Wijmo event name.\n     */\n    textChangedNg: EventEmitter<any>;\n    textChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectedIndexChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectedIndexChanged</b> Wijmo event name.\n     */\n    selectedIndexChangedNg: EventEmitter<any>;\n    selectedIndexChangePC: EventEmitter<any>;\n    selectedItemChangePC: EventEmitter<any>;\n    selectedValueChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemClicked</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemClicked</b> Wijmo event name.\n     */\n    itemClickedNg: EventEmitter<any>;\n    valueChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n    value: any;\n    ngOnChanges(changes: {\n        [key: string]: ngCore.SimpleChange;\n    }): void;\n    ngAfterContentInit(): void;\n    onItemClicked(e?: wjcCore.EventArgs): void;\n    refresh(fullUpdate?: boolean): void;\n    private _attachToControl;\n    private _loadingItems;\n    private _fmtItem;\n    private _updateHeader;\n}\ndeclare var wjMenuItemMeta: IWjComponentMeta;\nexport { wjMenuItemMeta };\n/**\n * Angular 2 directive for {@link wijmo.angular2.input.WjMenu} items.\n *\n * The <b>wj-menu-item</b> component must be\n * contained in a {@link wijmo.angular2.input.WjMenu} component.\n *\n * Use the <b>wj-menu-item</b> component to add <b></b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n*/\nexport declare class WjMenuItem implements OnInit, OnDestroy, AfterViewInit {\n    private viewContainerRef;\n    value: any;\n    cmd: any;\n    cmdParam: any;\n    header: string;\n    _ownerMenu: wjcInput.Menu;\n    templateDir: WjMenuItemTemplateDir;\n    contentRoot: HTMLElement;\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'itemsSource'.\n     */\n    wjProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any, viewContainerRef: ViewContainerRef);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    added(toItem: HTMLElement): void;\n}\nexport declare class WjMenuItemTemplateDir implements ngCore.AfterContentInit {\n    viewContainerRef: ViewContainerRef;\n    templateRef: TemplateRef<any>;\n    elRef: ElementRef;\n    wjMenuItemTemplateDir: any;\n    ownerItem: WjMenuItem;\n    contentRoot: HTMLElement;\n    constructor(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<any>, elRef: ElementRef, injector: Injector, menuItem: WjMenuItem, menuSeparator: WjMenuSeparator);\n    ngAfterContentInit(): void;\n}\ndeclare var wjMenuSeparatorMeta: IWjComponentMeta;\nexport { wjMenuSeparatorMeta };\n/**\n * Angular 2 directive for {@link wijmo.angular2.input.WjMenu} item separators.\n *\n * The <b>wj-menu-separator</b> component must be\n * contained in a {@link wijmo.angular2.input.WjMenu} component.\n *\n * Use the <b>wj-menu-separator</b> component to add <b></b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n*/\nexport declare class WjMenuSeparator extends WjMenuItem implements OnInit, OnDestroy, AfterViewInit {\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any, viewContainerRef: ViewContainerRef);\n    added(toItem: HTMLElement): void;\n}\ndeclare var wjItemTemplateMeta: IWjDirectiveMeta;\nexport { wjItemTemplateMeta };\n/**\n * Angular 2 directive for item templates of item list components.\n *\n * The <b>[wjItemTemplate]</b> directive must be\n * contained in one of the following components:\n * {@link wijmo.angular2.input.WjListBox}\n * , {@link wijmo.angular2.input.WjMenu}\n * , {@link wijmo.angular2.input.WjComboBox}\n *  or {@link wijmo.angular2.input.WjMultiSelect}.\n *\n * The <b>[wjItemTemplate]</b> directive defines a template for items of a component\n * that it's nested in.\n * The template may contain an arbitrary HTML fragment with Angular 2 bindings and directives.\n * The local <b>item</b>, <b>itemIndex</b> and <b>control</b> template variables can be used in Angular 2\n * bindings that refer to the data item, its index, and the owner control. For example:\n *\n *<pre>&lt;wj-list-box style=\"max-height:300px;width:250px;\"\n *             [itemsSource]=\"musicians\"&gt;\n *   &lt;ng-template wjItemTemplate let-item=\"item\" let-itemIndex=\"itemIndex\"&gt;\n *       {&#8203;{itemIndex + 1}}. &lt;b&gt;{&#8203;{item.name}}&lt;/b&gt;\n *       &lt;div *ngIf=\"item.photo\"&gt;\n *           &lt;img [src]=\"item.photo\" height=\"100\" /&gt;\n *           &lt;br /&gt;\n *           &lt;a href=\"https://www.google.com/#newwindow=1&q=The+Beatles+\"\n *              target=\"_blank\"\n *              style=\"color:red\"&gt;go there!&lt;/a&gt;\n *       &lt;/div&gt;\n *   &lt;/ng-template&gt;\n * &lt;/wj-list-box&gt;</pre>\n*/\nexport declare class WjItemTemplate implements OnInit, OnDestroy, AfterViewInit {\n    viewContainerRef: ViewContainerRef;\n    templateRef: TemplateRef<any>;\n    wjItemTemplate: any;\n    ownerControl: wjcCore.Control;\n    listBox: wjcInput.ListBox;\n    private _cdRef;\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any, viewContainerRef: ViewContainerRef, templateRef: TemplateRef<any>, cdRef: ChangeDetectorRef);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    private _attachToControl;\n    private _loadingItems;\n    private _fmtItem;\n    private _instantiateTemplate;\n    private static _getListBox;\n}\ndeclare var wjPopupMeta: IWjComponentMeta;\nexport { wjPopupMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.Popup} control.\n *\n * Use the <b>wj-popup</b> component to add <b>Popup</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjPopup</b> component is derived from the <b>Popup</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjPopup extends wjcInput.Popup implements OnInit, OnDestroy, AfterViewInit, OnChanges {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>showing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>showing</b> Wijmo event name.\n     */\n    showingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>shown</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>shown</b> Wijmo event name.\n     */\n    shownNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>hiding</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>hiding</b> Wijmo event name.\n     */\n    hidingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>hidden</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>hidden</b> Wijmo event name.\n     */\n    hiddenNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resizing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resizing</b> Wijmo event name.\n     */\n    resizingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>sizeChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>sizeChanging</b> Wijmo event name.\n     */\n    sizeChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>sizeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>sizeChanged</b> Wijmo event name.\n     */\n    sizeChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resized</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resized</b> Wijmo event name.\n     */\n    resizedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>dragging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>dragging</b> Wijmo event name.\n     */\n    draggingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>positionChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>positionChanging</b> Wijmo event name.\n     */\n    positionChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>positionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>positionChanged</b> Wijmo event name.\n     */\n    positionChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>dragged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>dragged</b> Wijmo event name.\n     */\n    draggedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n    ngOnChanges(changes: {\n        [key: string]: ngCore.SimpleChange;\n    }): void;\n    dispose(): void;\n}\n/**\n    * Angular 2 directive for context menus.\n    *\n    * Use the <b>wjContextMenu</b> directive to add context menus to elements\n    * on the page. The wjContextMenu directive is based on the <b>wj-menu</b>\n    * component; it displays a popup menu when the user performs a context menu\n    * request on an element (usually a right-click).\n    *\n    * The wjContextMenu directive is specified as a parameter added to the\n    * element that the context menu applies to. The parameter value is a\n    * reference to the <b>wj-menu</b> component. For example:\n    *\n    * <pre>&lt;!-- paragraph with a context menu --&gt;\n    *&lt;p [wjContextMenu]=\"menu\" &gt;\n    *  This paragraph has a context menu.&lt;/p&gt;\n    *\n    *&lt;!-- define the context menu (hidden and with an id) --&gt;\n    *&lt;wj-menu #menu style=\"display:none\"&gt;\n    *  &lt;wj-menu-item [cmd]=\"cmdOpen\" [cmdParam] =\"1\"&gt;Open...&lt;/wj-menu-item&gt;\n    *  &lt;wj-menu-item [cmd]=\"cmdSave\" [cmdParam]=\"2\"&gt;Save &lt;/wj-menu-item&gt;\n    *  &lt;wj-menu-item [cmd]=\"cmdSave\" [cmdParam]=\"3\"&gt;Save As...&lt;/wj-menu-item&gt;\n    *  &lt;wj-menu-item [cmd]=\"cmdNew\" [cmdParam] =\"4\"&gt;New...&lt;/wj-menu-item&gt;\n    *  &lt;wj-menu-separator&gt;&lt;/wj-menu-separator&gt;\n    *  &lt;wj-menu-item [cmd]=\"cmdExit\" [cmdParam]=\"5\"&gt;Exit&lt;/wj-menu-item&gt;\n    *&lt;/wj-menu &gt;</pre>\n    */\nexport declare class WjContextMenu {\n    private elRef;\n    wjContextMenu: wjcInput.Menu;\n    constructor(elRef: ElementRef);\n    onContextMenu(e: MouseEvent): void;\n}\ndeclare var wjCollectionViewNavigatorMeta: IWjComponentMeta;\nexport { wjCollectionViewNavigatorMeta };\n/**\n * Angular 2 component for the {@link wijmo.input.CollectionViewNavigator} control.\n *\n * Use the <b>wj-collection-view-navigator</b> component to add <b>CollectionViewNavigator</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjCollectionViewNavigator</b> component is derived from the <b>CollectionViewNavigator</b> control and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjCollectionViewNavigator extends wjcInput.CollectionViewNavigator implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\ndeclare var wjCollectionViewPagerMeta: IWjComponentMeta;\nexport { wjCollectionViewPagerMeta };\n/**\n    * Obsolete. Use wj-collection-view-navigator with [byPage]=\"true\" instead.\n    *\n    * Angular 2 component for an {@link ICollectionView} pager element.\n    *\n    * Use the <b>wj-collection-view-pager</b> component to add an element\n    * that allows users to navigate through the pages in a paged {@link ICollectionView}.\n    * For details about Angular 2 markup syntax, see\n    * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>. For example:\n    *\n    * <pre>&lt;wj-collection-view-pager\n    *   [cv]=\"myCollectionView\"&gt;\n    * &lt;/wj-collection-view-pager&gt;</pre>\n    */\nexport declare class WjCollectionViewPager extends wjcInput.CollectionViewNavigator implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n}\nexport declare class WjInputModule {\n}\n"]}