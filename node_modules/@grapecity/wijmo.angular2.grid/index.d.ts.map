{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/*!\n    *\n    * Wijmo Library 5.20211.794\n    * http://wijmo.com/\n    *\n    * Copyright(c) GrapeCity, Inc.  All rights reserved.\n    *\n    * Licensed under the GrapeCity Commercial License.\n    * sales@wijmo.com\n    * wijmo.com/products/wijmo-5/license/\n    *\n    */\n/**\n* {@module wijmo.angular2.grid}\n* Contains Angular 2 components for the <b>wijmo.grid</b> module.\n*\n* <b>wijmo.angular2.grid</b> is an external TypeScript module that can be imported to your code\n* using its ambient module name. For example:\n*\n* <pre>&lt;p&gt;Here is a data bound FlexGrid control with four columns:&lt;/p&gt;\n* &lt;wj-flex-grid [itemsSource]=\"data\"&gt;\n*   &lt;wj-flex-grid-column\n*     [header]=\"'Country'\"\n*     [binding]=\"'country'\"&gt;\n*   &lt;/wj-flex-grid-column&gt;\n*   &lt;wj-flex-grid-column\n*     [header]=\"'Sales'\"\n*     [binding]=\"'sales'\"&gt;\n*   &lt;/wj-flex-grid-column&gt;\n*   &lt;wj-flex-grid-column\n*     [header]=\"'Expenses'\"\n*     [binding]=\"'expenses'\"&gt;\n*   &lt;/wj-flex-grid-column&gt;\n*   &lt;wj-flex-grid-column\n*     [header]=\"'Downloads'\"\n*     [binding]=\"'downloads'\"&gt;\n*   &lt;/wj-flex-grid-column&gt;\n* &lt;/wj-flex-grid&gt;</pre>\n*\n*/\n/**\n *\n */\nexport declare var ___keepComment: any;\nimport { EventEmitter, AfterViewInit, ElementRef, Injector, ViewContainerRef, TemplateRef, OnInit, OnDestroy, ChangeDetectorRef, EmbeddedViewRef } from '@angular/core';\nimport { IWjComponentMetadata, IWjComponentMeta } from '@grapecity/wijmo.angular2.directivebase';\nimport { DirectiveCellFactoryBase, ICellTemplateInfo, ICellRenderingInfo, ICellTemplateCache, CellBindingsData } from '@grapecity/wijmo.interop.grid';\nimport * as ngCore from '@angular/core';\nimport * as wjcCore from '@grapecity/wijmo';\nimport * as wjcGrid from '@grapecity/wijmo.grid';\nimport * as wjcInteropGrid from '@grapecity/wijmo.interop.grid';\n/**\n * Represents a cell template types enumeration.\n */\nexport import CellTemplateType = wjcInteropGrid.GridCellTemplateType;\ndeclare var wjFlexGridMeta: IWjComponentMeta;\nexport { wjFlexGridMeta };\n/**\n * Angular 2 component for the {@link wijmo.grid.FlexGrid} control.\n *\n * Use the <b>wj-flex-grid</b> component to add <b>FlexGrid</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>. For example:\n *\n * <pre>&lt;p&gt;Here is a data bound FlexGrid control with four columns:&lt;/p&gt;\n * &lt;wj-flex-grid [itemsSource]=\"data\"&gt;\n *   &lt;wj-flex-grid-column\n *     [header]=\"'Country'\"\n *     [binding]=\"'country'\"&gt;\n *   &lt;/wj-flex-grid-column&gt;\n *   &lt;wj-flex-grid-column\n *     [header]=\"'Sales'\"\n *     [binding]=\"'sales'\"&gt;\n *   &lt;/wj-flex-grid-column&gt;\n *   &lt;wj-flex-grid-column\n *     [header]=\"'Expenses'\"\n *     [binding]=\"'expenses'\"&gt;\n *   &lt;/wj-flex-grid-column&gt;\n *   &lt;wj-flex-grid-column\n *     [header]=\"'Downloads'\"\n *     [binding]=\"'downloads'\"&gt;\n *   &lt;/wj-flex-grid-column&gt;\n * &lt;/wj-flex-grid&gt;</pre>\n *\n\n * The <b>WjFlexGrid</b> component is derived from the <b>FlexGrid</b> control and\n * inherits all its properties, events and methods.\n * The following properties are not available for binding in templates:\n * <b>scrollPosition</b>, <b>selection</b> and <b>columnLayout</b> properties.\n *\n * The <b>wj-flex-grid</b> component may contain the following child components:\n * {@link wijmo.angular2.grid.detail.WjFlexGridDetail}\n * , {@link wijmo.angular2.grid.filter.WjFlexGridFilter}\n * , {@link wijmo.angular2.grid.WjFlexGridColumn}\n *  and {@link wijmo.angular2.grid.WjFlexGridCellTemplate}.\n*/\nexport declare class WjFlexGrid extends wjcGrid.FlexGrid implements OnInit, OnDestroy, AfterViewInit {\n    cdRef: ChangeDetectorRef;\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>beginningEdit</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>beginningEdit</b> Wijmo event name.\n     */\n    beginningEditNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>cellEditEnded</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>cellEditEnded</b> Wijmo event name.\n     */\n    cellEditEndedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>cellEditEnding</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>cellEditEnding</b> Wijmo event name.\n     */\n    cellEditEndingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>prepareCellForEdit</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>prepareCellForEdit</b> Wijmo event name.\n     */\n    prepareCellForEditNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>formatItem</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>formatItem</b> Wijmo event name.\n     */\n    formatItemNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resizingColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resizingColumn</b> Wijmo event name.\n     */\n    resizingColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resizedColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resizedColumn</b> Wijmo event name.\n     */\n    resizedColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>autoSizingColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>autoSizingColumn</b> Wijmo event name.\n     */\n    autoSizingColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>autoSizedColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>autoSizedColumn</b> Wijmo event name.\n     */\n    autoSizedColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggingColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggingColumn</b> Wijmo event name.\n     */\n    draggingColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggingColumnOver</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggingColumnOver</b> Wijmo event name.\n     */\n    draggingColumnOverNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggedColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggedColumn</b> Wijmo event name.\n     */\n    draggedColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>sortingColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>sortingColumn</b> Wijmo event name.\n     */\n    sortingColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>sortedColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>sortedColumn</b> Wijmo event name.\n     */\n    sortedColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pinningColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pinningColumn</b> Wijmo event name.\n     */\n    pinningColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pinnedColumn</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pinnedColumn</b> Wijmo event name.\n     */\n    pinnedColumnNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resizingRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resizingRow</b> Wijmo event name.\n     */\n    resizingRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>resizedRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>resizedRow</b> Wijmo event name.\n     */\n    resizedRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>autoSizingRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>autoSizingRow</b> Wijmo event name.\n     */\n    autoSizingRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>autoSizedRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>autoSizedRow</b> Wijmo event name.\n     */\n    autoSizedRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggingRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggingRow</b> Wijmo event name.\n     */\n    draggingRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggingRowOver</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggingRowOver</b> Wijmo event name.\n     */\n    draggingRowOverNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>draggedRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>draggedRow</b> Wijmo event name.\n     */\n    draggedRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>deletingRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>deletingRow</b> Wijmo event name.\n     */\n    deletingRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>deletedRow</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>deletedRow</b> Wijmo event name.\n     */\n    deletedRowNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>loadingRows</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>loadingRows</b> Wijmo event name.\n     */\n    loadingRowsNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>loadedRows</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>loadedRows</b> Wijmo event name.\n     */\n    loadedRowsNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rowEditStarting</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rowEditStarting</b> Wijmo event name.\n     */\n    rowEditStartingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rowEditStarted</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rowEditStarted</b> Wijmo event name.\n     */\n    rowEditStartedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rowEditEnding</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rowEditEnding</b> Wijmo event name.\n     */\n    rowEditEndingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rowEditEnded</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rowEditEnded</b> Wijmo event name.\n     */\n    rowEditEndedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rowAdded</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rowAdded</b> Wijmo event name.\n     */\n    rowAddedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>groupCollapsedChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>groupCollapsedChanging</b> Wijmo event name.\n     */\n    groupCollapsedChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>groupCollapsedChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>groupCollapsedChanged</b> Wijmo event name.\n     */\n    groupCollapsedChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanging</b> Wijmo event name.\n     */\n    itemsSourceChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectionChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectionChanging</b> Wijmo event name.\n     */\n    selectionChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectionChanged</b> Wijmo event name.\n     */\n    selectionChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>scrollPositionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>scrollPositionChanged</b> Wijmo event name.\n     */\n    scrollPositionChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>updatingView</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>updatingView</b> Wijmo event name.\n     */\n    updatingViewNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>updatedView</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>updatedView</b> Wijmo event name.\n     */\n    updatedViewNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>updatingLayout</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>updatingLayout</b> Wijmo event name.\n     */\n    updatingLayoutNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>updatedLayout</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>updatedLayout</b> Wijmo event name.\n     */\n    updatedLayoutNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pasting</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pasting</b> Wijmo event name.\n     */\n    pastingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pasted</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pasted</b> Wijmo event name.\n     */\n    pastedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pastingCell</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pastingCell</b> Wijmo event name.\n     */\n    pastingCellNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>pastedCell</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>pastedCell</b> Wijmo event name.\n     */\n    pastedCellNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>copying</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>copying</b> Wijmo event name.\n     */\n    copyingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>copied</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>copied</b> Wijmo event name.\n     */\n    copiedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any, cdRef: ChangeDetectorRef);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n    _edtFocus: boolean;\n    startEditing(fullEdit?: boolean, r?: number, c?: number, focus?: boolean, evt?: any): boolean;\n    onCellEditEnding(e: wjcGrid.CellEditEndingEventArgs): boolean;\n}\ndeclare var wjFlexGridColumnMeta: IWjComponentMeta;\nexport { wjFlexGridColumnMeta };\n/**\n * Angular 2 component for the {@link wijmo.grid.Column} class.\n *\n * The <b>wj-flex-grid-column</b> component must be\n * contained in a {@link wijmo.angular2.grid.WjFlexGrid} component.\n *\n * Use the <b>wj-flex-grid-column</b> component to add <b>Column</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexGridColumn</b> component is derived from the <b>Column</b> class and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-flex-grid-column</b> component may contain a {@link wijmo.angular2.grid.WjFlexGridCellTemplate} child directive.\n*/\nexport declare class WjFlexGridColumn extends wjcGrid.Column implements OnInit, OnDestroy, AfterViewInit {\n    cdRef: ChangeDetectorRef;\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'columns'.\n     */\n    wjProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    isSelectedChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any, cdRef: ChangeDetectorRef);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\n/**\n* Angular 2 directive for the {@link FlexGrid} cell templates.\n*\n* The <b>wjFlexGridCellTemplate</b> directive defines a template for a certain\n* cell type in {@link FlexGrid}. The template should be defined on a <b>&lt;ng-template&gt;</b> element\n* and must contain a <b>cellType</b> attribute that\n* specifies the {@link wijmo.angular2.grid.CellTemplateType}. Depending on the template's cell type,\n* the <b>&lt;ng-template&gt;</b> element with the <b>wjFlexGridCellTemplate</b> directive must be a child\n* of either {@link wijmo.angular2.grid.WjFlexGrid}\n* or {@link wijmo.angular2.grid.WjFlexGridColumn} components.\n*\n* Column-specific cell templates must be contained in <b>wj-flex-grid-column</b>\n* components, and cells that are not column-specific (like row header or top left cells)\n* must be contained in the <b>wj-flex-grid</b> component.\n*\n* The <b>&lt;ng-template&gt;</b> element with the <b>wjFlexGridCellTemplate</b> directive\n* may contain an arbitrary HTML fragment with Angular 2 interpolation expressions and\n* other components and directives.\n*\n* Bindings in HTML fragment can use the <b>cell</b> local template variable containing the cell context object,\n* with <b>col</b>, <b>row</b>, and <b>item</b> properties that refer to the {@link Column},\n* {@link Row}, and <b>Row.dataItem</b> objects pertaining to the cell.\n*\n* For cell types like <b>Group</b> and <b>CellEdit</b>, an additional <b>value</b>\n* property containing an unformatted cell value is provided. For example, here is a\n* {@link FlexGrid} control with templates for row header cells and, regular\n* and column header cells of the Country column:\n*\n* ```typescript\n* // component.ts\n* import * as wjGrid from '@grapecity/wijmo.angular2.grid';\n*\n* @Component({\n*     templateUrl: './component.html',\n*     selector: 'my-cmp',\n* })\n* export class MyCmp {\n*     data: any[];\n* }\n* ```\n* ```html\n* <!-- component.html -->\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'RowHeader'\" let-cell=\"cell\">\n*     {{cell.row.index}}\n*   </ng-template>\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'RowHeaderEdit'\">\n*     ...\n*   </ng-template>\n*\n*   <wj-flex-grid-column [header]=\"'Country'\" [binding]=\"'country'\">\n*     <ng-template wjFlexGridCellTemplate [cellType]=\"'ColumnHeader'\" let-cell=\"cell\">\n*       <img src=\"resources/globe.png\" />\n*         {{cell.col.header}}\n*     </ng-template>\n*     <ng-template wjFlexGridCellTemplate [cellType]=\"'Cell'\" let-cell=\"cell\">\n*       <img src=\"resources/{{cell.item.country}}.png\" />\n*       {{cell.item.country}}\n*     </ng-template>\n*   </wj-flex-grid-column>\n*   <wj-flex-grid-column [header]=\"'Sales'\" [binding]=\"'sales'\"></wj-flex-grid-column>\n* </wj-flex-grid>\n* ```\n*\n* The <b>cellType</b> attribute takes any of the following enumerated values:\n*\n* <b>Cell</b>\n*\n* Defines a regular (data) cell template. Must be a child of the {@link wijmo.angular2.grid.WjFlexGridColumn} component.\n* For example, this cell template shows flags in the cells of Country column:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Country'\" [binding]=\"'country'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'Cell'\" let-cell=\"cell\">\n*     <img src=\"resources/{{cell.item.country}}.png\" />\n*     {{cell.item.country}}\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* If <b>Group</b> template is not provided for a hierarchical {@link FlexGrid} (that is, one with the <b>childItemsPath</b> property\n* specified), non-header cells in group rows of\n* this {@link Column} also use this template.\n*\n* <b>CellEdit</b>\n*\n* Defines a template for a cell in edit mode. Must be a child of the {@link wijmo.angular2.grid.WjFlexGridColumn} component.\n* This cell type has an additional <b>cell.value</b> property available for binding. It contains the\n* original cell value before editing, and the updated value after editing.\n\n* For example, here is a template that uses the Wijmo {@link InputNumber} control as an editor\n* for the \"Sales\" column:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Sales'\" [binding]=\"'sales'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'CellEdit'\">\n*     <wj-input-number [(value)]=\"cell.value\" [step]=\"1\"></wj-input-number>\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* <b>ColumnHeader</b>\n*\n* Defines a template for a column header cell. Must be a child of the {@link wijmo.angular2.grid.WjFlexGridColumn} component.\n* For example, this template adds an image to the header of the \"Country\" column:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Country'\" [binding]=\"'country'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'ColumnHeader'\" let-cell=\"cell\">\n*     <img src=\"resources/globe.png\" />\n*     {{cell.col.header}}\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* <b>RowHeader</b>\n*\n* Defines a template for a row header cell. Must be a child of the {@link wijmo.angular2.grid.WjFlexGrid} component.\n* For example, this template shows row indices in the row headers:\n*\n* ```html\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'RowHeader'\" let-cell=\"cell\">\n*     {{cell.row.index + 1}}\n*   </ng-template>\n* </wj-flex-grid>\n* ```\n*\n* Note that this template is applied to a row header cell, even if it is in a row that is\n* in edit mode. In order to provide an edit-mode version of a row header cell with alternate\n* content, define the <b>RowHeaderEdit</b> template.\n*\n* <b>RowHeaderEdit</b>\n*\n* Defines a template for a row header cell in edit mode. Must be a child of the\n* {@link wijmo.angular2.grid.WjFlexGrid} component. For example, this template shows dots in the header\n* of rows being edited:\n*\n* ```html\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'RowHeaderEdit'\">\n*     ...\n*   </ng-template>\n* </wj-flex-grid>\n* ```\n*\n* Use the following <b>RowHeaderEdit</b> template to add the standard edit-mode indicator to cells where the <b>RowHeader</b> template\n* applies:\n*\n* ```html\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'RowHeaderEdit'\">\n*     {{&amp;#x270e;}}\n*   </ng-template>\n* </wj-flex-grid>\n* ```\n*\n* <b>TopLeft</b>\n*\n* Defines a template for the top left cell. Must be a child of the {@link wijmo.angular2.grid.WjFlexGrid} component.\n* For example, this template shows a down/right glyph in the top-left cell of the grid:\n*\n* ```html\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'TopLeft'\">\n*     <span class=\"wj-glyph-down-right\"></span>\n*   </ng-template>\n* </wj-flex-grid>\n* ```\n*\n* <b>GroupHeader</b>\n*\n* Defines a template for a group header cell in a {@link GroupRow}. Must be a child of the {@link wijmo.angular2.grid.WjFlexGridColumn} component.\n*\n* The <b>cell.row</b> property contains an instance of the <b>GroupRow</b> class. If the grouping comes\n* from {@link CollectionView}, the <b>cell.item</b> property references the {@link CollectionViewGroup} object.\n*\n* For example, this template uses a checkbox element as an expand/collapse toggle:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Country'\" [binding]=\"'country'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'GroupHeader'\" let-cell=\"cell\">\n*     <input type=\"checkbox\" [(ngModel)]=\"cell.row.isCollapsed\"/>\n*     {{cell.item.name}} ({{cell.item.items.length}} items)\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* <b>Group</b>\n*\n* Defines a template for a regular cell (not a group header) in a {@link GroupRow}. Must be a child of the\n* {@link wijmo.angular2.grid.WjFlexGridColumn} component. This cell type has an additional <b>cell.value</b> property available for\n* binding. In cases where columns have the <b>aggregate</b> property specified, it contains the unformatted\n* aggregate value.\n*\n* For example, this template shows aggregate's value and kind for group row cells in the \"Sales\"\n* column:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Sales'\" [binding]=\"'sales'\" [aggregate]=\"'Avg'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'Group'\" let-cell=\"cell\">\n*     Average: {{cell.value | number:'1.0-0'}}\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* <b>ColumnFooter</b>\n*\n* Defines a template for a regular cell in a <b>columnFooters</b> panel. Must be a child of the\n* {@link wijmo.angular2.grid.WjFlexGridColumn} component. This cell type has an additional <b>cell.value</b>\n* property available for binding that contains a cell value.\n*\n* For example, this template shows aggregate's value and kind for a footer cell in the \"Sales\"\n* column:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Sales'\" [binding]=\"'sales'\" [aggregate]=\"'Avg'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'ColumnFooter'\" let-cell=\"cell\">\n*     Average: {{cell.value | number:'1.0-0'}}\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*\n* <b>BottomLeft</b>\n*\n* Defines a template for the bottom left cells (at the intersection of the row header and column footer cells).\n* Must be a child of the {@link wijmo.angular2.grid.WjFlexGrid} component.\n* For example, this template shows a sigma glyph in the bottom-left cell of the grid:\n*\n* ```html\n* <wj-flex-grid [itemsSource]=\"data\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'BottomLeft'\">\n*     &amp;#931;\n*   </ng-template>\n* </wj-flex-grid>\n* ```\n*\n* <b>NewCellTemplate</b>\n*\n* Defines a cell in a new row template. Must be a child of the {@link wijmo.angular2.grid.WjFlexGridColumn} component.\n* Note that the <b>cell.item</b> property is undefined for this type of a cell.\n* For example, this cell template shows a placeholder in the Date column's cell in the \"new row\" item:\n*\n* ```html\n* <wj-flex-grid-column [header]=\"'Date'\" [binding]=\"'date'\">\n*   <ng-template wjFlexGridCellTemplate [cellType]=\"'NewCellTemplate'\">\n*     Enter a date here\n*   </ng-template>\n* </wj-flex-grid-column>\n* ```\n*/\nexport declare class WjFlexGridCellTemplate implements ngCore.OnInit, ngCore.OnDestroy {\n    viewContainerRef: ViewContainerRef;\n    templateRef: TemplateRef<any>;\n    elRef: ElementRef;\n    cdRef: ChangeDetectorRef;\n    wjFlexGridCellTemplate: any;\n    cellTypeStr: string;\n    /**\n    * Defines the <b>style.overflow</b> property value for cells.\n    */\n    cellOverflow: string;\n    /**\n    * Defines the type of cell to which the template is applied. String enum member\n    * names can be used to specify the property value as well.\n    */\n    cellType: CellTemplateType;\n    valuePaths: Object;\n    /**\n    * Gets or sets a value indicating whether the cell template will increase grid's default row height\n    * to accomodate cells content. Defaults to true.\n    */\n    autoSizeRows: boolean;\n    /**\n    * For cell edit templates, indicates whether cell editing forcibly starts in full edit mode,\n    * regardless of how the editing was initiated. In full edit mode pressing cursor keys don't finish editing.\n    * Defaults to true.\n    */\n    forceFullEdit: boolean;\n    grid: wjcGrid.FlexGrid;\n    column: wjcGrid.Column;\n    ownerControl: any;\n    constructor(viewContainerRef: ViewContainerRef, templateRef: TemplateRef<any>, elRef: ElementRef, parentCmp: any, injector: Injector, cdRef: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _instantiateTemplate(parent: HTMLElement, dataContext: any): {\n        viewRef: ngCore.EmbeddedViewRef<any>;\n        rootElement: Element;\n    };\n    private _attachToControl;\n}\ninterface ICellRenderingInfoNg extends ICellRenderingInfo {\n    templateContext: ICellTemplateContextNg;\n    templateCache: ICellTemplateCacheNg;\n}\ninterface ICellTemplateCacheNg extends ICellTemplateCache {\n    viewRef: EmbeddedViewRef<any>;\n}\ninterface ICellTemplateContextNg extends ICellTemplateInfo {\n    cdRef: ChangeDetectorRef;\n    viewContainerRef: ViewContainerRef;\n    _instantiateTemplate(parent: HTMLElement, dataContext: any): {\n        viewRef: EmbeddedViewRef<any>;\n        rootElement: Element;\n    };\n}\nexport declare class DirectiveCellFactory extends DirectiveCellFactoryBase {\n    private _gridCdRef;\n    private _needsCdCheck;\n    grid: WjFlexGrid;\n    constructor(grid: WjFlexGrid, gridCdRef: ChangeDetectorRef);\n    protected shouldInstantiate(cellInfo: ICellRenderingInfoNg): boolean;\n    protected renderTemplate(cellInfo: ICellRenderingInfoNg, initNew: boolean): void;\n    protected setBindingsData(context: any, row: wjcGrid.Row, col: wjcGrid.Column, dataItem: any, cellValue: any, valuePaths: Object): CellBindingsData;\n    protected disposeTemplate(cell: HTMLElement, templateCache: ICellTemplateCacheNg, templateContext: ICellTemplateContextNg): void;\n    protected clearCell(cell: HTMLElement): void;\n    protected applyImmediately(cellInfo: ICellRenderingInfoNg): void;\n    protected flushPendingEvents(control: wjcCore.Control): void;\n    protected getEditorFocusFlag(): boolean;\n    protected setEditorFocusFlag(value: boolean): void;\n    protected checkHeight(cellInfo: ICellRenderingInfo): void;\n}\nexport declare class WjGridModule {\n}\n"]}