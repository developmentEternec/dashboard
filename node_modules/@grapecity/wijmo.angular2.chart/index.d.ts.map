{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/*!\n    *\n    * Wijmo Library 5.20211.794\n    * http://wijmo.com/\n    *\n    * Copyright(c) GrapeCity, Inc.  All rights reserved.\n    *\n    * Licensed under the GrapeCity Commercial License.\n    * sales@wijmo.com\n    * wijmo.com/products/wijmo-5/license/\n    *\n    */\n/**\n* {@module wijmo.angular2.chart}\n* Contains Angular 2 components for the <b>wijmo.chart</b> module.\n*\n* <b>wijmo.angular2.chart</b> is an external TypeScript module that can be imported to your code\n* using its ambient module name. For example:\n*\n* <pre>import * as wjChart from 'wijmo/wijmo.angular2.chart';\n* &nbsp;\n* &#64;Component({\n*     directives: [wjChart.WjFlexChart, wjChart.WjFlexChartSeries],\n*     template: `\n*       &lt;wj-flex-chart [itemsSource]=\"data\" [bindingX]=\"'x'\"&gt;\n*           &lt;wj-flex-chart-series [binding]=\"'y'\"&gt;&lt;/wj-flex-chart-series&gt;\n*       &lt;/wj-flex-chart&gt;`,\n*     selector: 'my-cmp',\n* })\n* export class MyCmp {\n*     data: any[];\n* }</pre>\n*\n*/\n/**\n *\n */\nexport declare var ___keepComment: any;\nimport { EventEmitter, AfterViewInit, ElementRef, Injector, OnInit, OnDestroy } from '@angular/core';\nimport { IWjComponentMetadata, IWjComponentMeta } from '@grapecity/wijmo.angular2.directivebase';\nimport * as wjcChart from '@grapecity/wijmo.chart';\ndeclare var wjFlexChartMeta: IWjComponentMeta;\nexport { wjFlexChartMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.FlexChart} control.\n *\n * Use the <b>wj-flex-chart</b> component to add <b>FlexChart</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChart</b> component is derived from the <b>FlexChart</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-flex-chart</b> component may contain the following child components:\n * {@link wijmo.angular2.chart.analytics.WjFlexChartTrendLine}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartMovingAverage}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartYFunctionSeries}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartParametricFunctionSeries}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartWaterfall}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartBoxWhisker}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartErrorBar}\n * , {@link wijmo.angular2.chart.analytics.WjFlexChartBreakEven}\n * , {@link wijmo.angular2.chart.animation.WjFlexChartAnimation}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationLayer}\n * , {@link wijmo.angular2.chart.interaction.WjFlexChartRangeSelector}\n * , {@link wijmo.angular2.chart.interaction.WjFlexChartGestures}\n * , {@link wijmo.angular2.chart.WjFlexChartAxis}\n * , {@link wijmo.angular2.chart.WjFlexChartLegend}\n * , {@link wijmo.angular2.chart.WjFlexChartDataLabel}\n * , {@link wijmo.angular2.chart.WjFlexChartSeries}\n * , {@link wijmo.angular2.chart.WjFlexChartLineMarker}\n *  and {@link wijmo.angular2.chart.WjFlexChartPlotArea}.\n*/\nexport declare class WjFlexChart extends wjcChart.FlexChart implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendering</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendering</b> Wijmo event name.\n     */\n    renderingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendered</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendered</b> Wijmo event name.\n     */\n    renderedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectionChanged</b> Wijmo event name.\n     */\n    selectionChangedNg: EventEmitter<any>;\n    selectionChangePC: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanging</b> Wijmo event name.\n     */\n    itemsSourceChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>seriesVisibilityChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>seriesVisibilityChanged</b> Wijmo event name.\n     */\n    seriesVisibilityChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n    tooltipContent: any;\n    labelContent: any;\n}\ndeclare var wjFlexPieMeta: IWjComponentMeta;\nexport { wjFlexPieMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.FlexPie} control.\n *\n * Use the <b>wj-flex-pie</b> component to add <b>FlexPie</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexPie</b> component is derived from the <b>FlexPie</b> control and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-flex-pie</b> component may contain the following child components:\n * {@link wijmo.angular2.chart.animation.WjFlexChartAnimation}\n * , {@link wijmo.angular2.chart.WjFlexChartLegend}\n *  and {@link wijmo.angular2.chart.WjFlexPieDataLabel}.\n*/\nexport declare class WjFlexPie extends wjcChart.FlexPie implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Defines a name of a property represented by [(ngModel)] directive (if specified).\n     * Default value is ''.\n     */\n    wjModelProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>gotFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>gotFocus</b> Wijmo event name.\n     */\n    gotFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>lostFocus</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>lostFocus</b> Wijmo event name.\n     */\n    lostFocusNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshing</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshing</b> Wijmo event name.\n     */\n    refreshingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>refreshed</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>refreshed</b> Wijmo event name.\n     */\n    refreshedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>invalidInput</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>invalidInput</b> Wijmo event name.\n     */\n    invalidInputNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendering</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendering</b> Wijmo event name.\n     */\n    renderingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendered</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendered</b> Wijmo event name.\n     */\n    renderedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>selectionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>selectionChanged</b> Wijmo event name.\n     */\n    selectionChangedNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanging</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanging</b> Wijmo event name.\n     */\n    itemsSourceChangingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>itemsSourceChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>itemsSourceChanged</b> Wijmo event name.\n     */\n    itemsSourceChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    addEventListener(target: EventTarget, type: string, fn: any, capture?: boolean): void;\n    tooltipContent: any;\n    labelContent: any;\n}\ndeclare var wjFlexChartAxisMeta: IWjComponentMeta;\nexport { wjFlexChartAxisMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.Axis} class.\n *\n * The <b>wj-flex-chart-axis</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.chart.WjFlexChart}\n * , {@link wijmo.angular2.chart.WjFlexChartSeries}\n * , {@link wijmo.angular2.chart.finance.WjFinancialChart}\n *  or {@link wijmo.angular2.chart.finance.WjFinancialChartSeries}.\n *\n * Use the <b>wj-flex-chart-axis</b> component to add <b>Axis</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartAxis</b> component is derived from the <b>Axis</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartAxis extends wjcChart.Axis implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'axes'.\n     */\n    wjProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rangeChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rangeChanged</b> Wijmo event name.\n     */\n    rangeChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartLegendMeta: IWjComponentMeta;\nexport { wjFlexChartLegendMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.Legend} class.\n *\n * The <b>wj-flex-chart-legend</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.chart.WjFlexChart}\n * , {@link wijmo.angular2.chart.WjFlexPie}\n * , {@link wijmo.angular2.chart.finance.WjFinancialChart}\n * , {@link wijmo.angular2.chart.radar.WjFlexRadar}\n * , {@link wijmo.angular2.chart.hierarchical.WjSunburst}\n *  or {@link wijmo.angular2.chart.map.WjFlexMap}.\n *\n * Use the <b>wj-flex-chart-legend</b> component to add <b>Legend</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartLegend</b> component is derived from the <b>Legend</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartLegend extends wjcChart.Legend implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'legend'.\n     */\n    wjProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartDataLabelMeta: IWjComponentMeta;\nexport { wjFlexChartDataLabelMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.DataLabel} class.\n *\n * The <b>wj-flex-chart-data-label</b> component must be\n * contained in a {@link wijmo.angular2.chart.WjFlexChart} component.\n *\n * Use the <b>wj-flex-chart-data-label</b> component to add <b>DataLabel</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartDataLabel</b> component is derived from the <b>DataLabel</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartDataLabel extends wjcChart.DataLabel implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'dataLabel'.\n     */\n    wjProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendering</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendering</b> Wijmo event name.\n     */\n    renderingNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexPieDataLabelMeta: IWjComponentMeta;\nexport { wjFlexPieDataLabelMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.PieDataLabel} class.\n *\n * The <b>wj-flex-pie-data-label</b> component must be\n * contained in a {@link wijmo.angular2.chart.WjFlexPie} component.\n *\n * Use the <b>wj-flex-pie-data-label</b> component to add <b>PieDataLabel</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexPieDataLabel</b> component is derived from the <b>PieDataLabel</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexPieDataLabel extends wjcChart.PieDataLabel implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'dataLabel'.\n     */\n    wjProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendering</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendering</b> Wijmo event name.\n     */\n    renderingNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartSeriesMeta: IWjComponentMeta;\nexport { wjFlexChartSeriesMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.Series} class.\n *\n * The <b>wj-flex-chart-series</b> component must be\n * contained in a {@link wijmo.angular2.chart.WjFlexChart} component.\n *\n * Use the <b>wj-flex-chart-series</b> component to add <b>Series</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartSeries</b> component is derived from the <b>Series</b> class and\n * inherits all its properties, events and methods.\n *\n * The <b>wj-flex-chart-series</b> component may contain a {@link wijmo.angular2.chart.WjFlexChartAxis} child component.\n*/\nexport declare class WjFlexChartSeries extends wjcChart.Series implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'series'.\n     */\n    wjProperty: string;\n    /**\n     * Allows you to override the global <b>WjOptions.asyncBindings</b> setting for this specific component.\n     * See the <b>WjOptions.</b>{@link WjOptions.asyncBindings} property description for details.\n     */\n    asyncBindings: boolean;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendering</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendering</b> Wijmo event name.\n     */\n    renderingNg: EventEmitter<any>;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>rendered</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>rendered</b> Wijmo event name.\n     */\n    renderedNg: EventEmitter<any>;\n    visibilityChangePC: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartLineMarkerMeta: IWjComponentMeta;\nexport { wjFlexChartLineMarkerMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.LineMarker} class.\n *\n * The <b>wj-flex-line-marker</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.chart.WjFlexChart}\n *  or {@link wijmo.angular2.chart.finance.WjFinancialChart}.\n *\n * Use the <b>wj-flex-line-marker</b> component to add <b>LineMarker</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartLineMarker</b> component is derived from the <b>LineMarker</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartLineMarker extends wjcChart.LineMarker implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is ''.\n     */\n    wjProperty: string;\n    /**\n     * Angular (EventEmitter) version of the Wijmo <b>positionChanged</b> event for programmatic access.\n     * Use this event name if you want to subscribe to the Angular version of the event in code.\n     * In template bindings use the conventional <b>positionChanged</b> Wijmo event name.\n     */\n    positionChangedNg: EventEmitter<any>;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartDataPointMeta: IWjComponentMeta;\nexport { wjFlexChartDataPointMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.DataPoint} class.\n *\n * The <b>wj-flex-chart-data-point</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationText}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationEllipse}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationRectangle}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationLine}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationPolygon}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationCircle}\n * , {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationSquare}\n *  or {@link wijmo.angular2.chart.annotation.WjFlexChartAnnotationImage}.\n *\n * Use the <b>wj-flex-chart-data-point</b> component to add <b>DataPoint</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartDataPoint</b> component is derived from the <b>DataPoint</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartDataPoint extends wjcChart.DataPoint implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is ''.\n     */\n    wjProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\ndeclare var wjFlexChartPlotAreaMeta: IWjComponentMeta;\nexport { wjFlexChartPlotAreaMeta };\n/**\n * Angular 2 component for the {@link wijmo.chart.PlotArea} class.\n *\n * The <b>wj-flex-chart-plot-area</b> component must be\n * contained in one of the following components:\n * {@link wijmo.angular2.chart.WjFlexChart}\n *  or {@link wijmo.angular2.chart.finance.WjFinancialChart}.\n *\n * Use the <b>wj-flex-chart-plot-area</b> component to add <b>PlotArea</b> controls to your\n * Angular 2 applications. For details about Angular 2 markup syntax, see\n * <a href=\"/wijmo/docs/GettingStarted/Angular-Components\">Angular 2 Markup</a>.\n *\n* The <b>WjFlexChartPlotArea</b> component is derived from the <b>PlotArea</b> class and\n * inherits all its properties, events and methods.\n*/\nexport declare class WjFlexChartPlotArea extends wjcChart.PlotArea implements OnInit, OnDestroy, AfterViewInit {\n    static readonly meta: IWjComponentMetadata;\n    private _wjBehaviour;\n    /**\n     * Indicates whether the component has been initialized by Angular.\n     * Changes its value from false to true right before triggering the <b>initialized</b> event.\n     */\n    isInitialized: boolean;\n    /**\n     * This event is triggered after the component has been initialized by Angular, that is\n     * all bound properties have been assigned and child components (if any) have been initialized.\n     */\n    initialized: EventEmitter<any>;\n    /**\n     * Gets or sets a name of a property that this component is assigned to.\n     * Default value is 'plotAreas'.\n     */\n    wjProperty: string;\n    constructor(elRef: ElementRef, injector: Injector, parentCmp: any);\n    /**\n     * If you create a custom component inherited from a Wijmo component, you can override this\n     * method and perform necessary initializations that you usually do in a class constructor.\n     * This method is called in the last line of a Wijmo component constructor and allows you\n     * to not declare your custom component's constructor at all, thus preventing you from a necessity\n     * to maintain constructor parameters and keep them in synch with Wijmo component's constructor parameters.\n     */\n    created(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class WjChartModule {\n}\n"]}